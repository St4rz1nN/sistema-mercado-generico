//COMANDOS MYSQL PERMISSIONS

SELECT * FROM produto;idnomeid

SET SQL_SAFE_UPDATES = 0;

drop table compra;
drop table carrinhoproduto;
drop table  produto;

SET SQL_SAFE_UPDATES = 1;

SELECT * FROM cargo;
INSERT INTO cargo(nome) VALUES ("ADMIN");

SELECT * FROM permissao;
INSERT INTO permissao(nome) VALUES ("ADMIN.*");

SELECT * FROM cargopermissao;
INSERT INTO cargopermissao(idcargo,idpermissao) VALUES (1,1);

SELECT * FROM usuariocargo;
INSERT INTO usuariocargo(idusuario,idcargo) VALUES (37,1);

SELECT * FROM usuario;





// /project/server/server.js
//netstat -ano | findstr :3000
//taskkill /PID 3000 /F
const db = require('./DataBase')
const express = require('express');
const cookieParser = require('cookie-parser');
const uuid = require('uuid');
const bodyParser = require('body-parser');
const session = require('express-session');
const cors = require('cors');
const mysql = require('mysql');
const MySQLStore = require('express-mysql-session')(session); // Importa o MySQLStore
const axios = require('axios');

const app = express();
const port = 3000;

const ProdutoDAO = require('../js/ProdutoDAO');
const produtoDAO = new ProdutoDAO();

const Compra = require('../js/Compra')

const CompraDAO = require('../js/CompraDAO');
const compraDAO = new CompraDAO();


const CarrinhoProdutoDAO = require('../js/CarrinhoProdutoDAO');
const carrinhoProdutoDAO = new CarrinhoProdutoDAO();

const PermissaoDAO = require('../js/PermissaoDAO');
const permissaoDAO = new PermissaoDAO();

const EnderecoDAO = require('../js/EnderecoDAO');
const enderecoDAO = new EnderecoDAO();

const Carrinho = require('../js/Carrinho');

const baseURL = 'http://localhost:3000';

app.use(bodyParser.json());

// Configuração da sessão

const corsOptions = {
    credentials: true,
    origin: 'http://127.0.0.1:5500',
    optionsSuccessStatus: 200
};

app.use(cors(corsOptions));

const sessionConfig = {
    secret: "1234",
    resave: false,
    saveUninitialized: false,
    cookie: {
        maxAge: 1000 * 60 * 30,
        sameSite: 'lax', 
        secure: false,
        httpOnly: true
    }
};

app.use(session(sessionConfig));


function formatDateToMySQL(date) {
    const pad = (n) => n < 10 ? '0' + n : n;
    return date.getUTCFullYear() + '-' +
           pad(date.getUTCMonth() + 1) + '-' +
           pad(date.getUTCDate()) + ' ' +
           pad(date.getUTCHours()) + ':' +
           pad(date.getUTCMinutes()) + ':' +
           pad(date.getUTCSeconds());
}

//PRODUTOS

app.post('/selecionarprodutocadastro/:produtoID', (req, res) =>{
    const produtoID = req.params.produtoID;

    req.session.produtoCadastro = produtoID;
    req.session.save();
    res.sendStatus(200);
});

app.get('/getprodutocadastro', (req, res) =>{
    const produtoID = req.session.produtoCadastro;
    if(produtoID){
        res.status(200).json(produtoID);
    }else{
        res.status(500).json('Produto não encontrado!');
    }
});


app.post('/cadastrarproduto', async (req, res) =>{
    const produto = req.body;
    produto.id = null;
    produtoDAO.cadastrarProduto(produto,(error) => {
        if(error){
            res.status(500).json(`Erro ao cadastrar Produto: ${error}`);
            console.log("Erro ao cadastrar produto!")
        }else{
            res.status(200).json(`Sucesso ao cadastrar Produto!`);
            console.log("sUCESSO AO CADASTRAR PRODUTO!")
        }
    });
});

app.post('/editarproduto', (req, res) =>{
    const produto = req.body;

    produtoDAO.editarProduto(produto,(error) => {
        if(error){
            res.status(500).json(`Erro ao editar Produto: ${error}`);
        }else{
            res.status(200).json(`Sucesso ao editar Produto!`);
        }
    });
});


app.post('/removerproduto/:produtoID', (req, res) =>{
    const produtoID = req.params.produtoID;

    produtoDAO.removerProduto(produtoID,(error) => {
        if(error){
            res.status(500).json(`${error}`);
        }else{
            res.status(200).json(`Sucesso ao remover Produto!`);
        }
    });
});

app.get('/listarprodutos', (req, res) =>{

    produtoDAO.listarProdutos((error, results) => {
        if(error){
            res.status(500).send(`Erro ao Listar Produtos: ${error}`);
            console.log("Erro ao listar produtos: " + error);
        }else{
            res.status(200).json(results);
            console.log("Retornando produtos: " + results);
        }
    });
});

app.get('/getProdutoByID/:productID', (req, res) =>{

    const id = req.params.productID;

    produtoDAO.getProdutoByID(id,(error, results) => {
        if(error){
            res.status(500).send(`Erro ao buscar o Produto por ID: ${error}`);
            console.log("Erro ao buscar o Produto Por ID: " + error);
        }else{
            res.status(200).json(results);
            console.log("Retornando produto: " + results);
        }
    });
});

app.post('/selecionarProduto/:productId', async (req, res) => {
    const productId = req.params.productId;
    req.session.selectedProductID = productId;
    req.session.save();

    res.sendStatus(200);
});

app.get('/getProdutoSetado', async (req, res) => {
    const selectedProductID = req.session.selectedProductID;

    const response = await axios.get(`${baseURL}/getProdutoByID/${selectedProductID}`);

    const produto = response.data[0];

    console.log("Produto Retornadoi: " + produto)

    if (produto) {
        res.json(produto);
    } else {
        res.sendStatus(404);
    }
});


//CARRINHO

app.get('/getcarrinho', async (req, res) => {
    const carrinhoID = req.session.user.id;
    
    console.log("Pegando Rota GetCarinho! ");

    const carrinho = new Carrinho(carrinhoID);
    await carrinho.init();

    carrinho.getProdutos((results) => {
        console.log("Get Carrinho: " + results + carrinhoID);
        res.status(200).json(results);
    });
});


app.get('/getcarrinhovalortotal', async (req, res) => {
    const carrinhoID = req.session.user.id;
    const carrinho = new Carrinho(carrinhoID);
    await carrinho.init();

    console.log("Pegando Rota GetCarinhoValorTotal! ");

    carrinho.getValorTotal((results) => {
        console.log("Get Carrinho Valor Total: " + results + carrinhoID);
        res.status(200).json(results);
    });
});

app.post('/removecarrinho/:productId', async (req, res) => {
    const productId = req.params.productId;
    const carrinhoID = req.session.user.id;
    const response = await axios.get(`${baseURL}/getProdutoByID/${productId}`);
    const produto = response.data[0];

    const carrinho = new Carrinho(carrinhoID);
    await carrinho.init();

    console.log("Pegando Rota RemoveCarrinho! ");

    carrinho.removerProduto(produto,1,(error) => {
        if(error){
            res.status(500).json(error);
        } else {
            res.status(200).json(null);
        }
    });
});

app.post('/adicionarcarrinho/:productId', async (req, res) =>{
    const productId = req.params.productId;
    const carrinhoID = req.session.user.id;

    const response = await axios.get(`${baseURL}/getProdutoByID/${productId}`);
    const produto = response.data[0];

    const carrinho = new Carrinho(carrinhoID);
    await carrinho.init();

    carrinho.adicionarProduto(produto, (error) => {
        if(error){
            res.status(500).send(`Erro ao Adicionar Produto ao Carrinho: ${error}`);
            console.log("Erro ao Adicionar Produto ao Carrinho: " + error);
        }else{
            res.status(200).send(`Produto Adicionado com Sucesso!`);
        }
    });
});

app.get('/getmaioridcompra', async (req, res) =>{
    compraDAO.getMaiorID((error,results) =>{
        if(error){
            res.status(500).json(error);
        }else{
            res.status(200).json(results);
        }
    });
});

app.post('/finalizarcompra', async (req, res) =>{

    try {
        
        const carrinhoID = req.session.user.id;

        const carrinho = new Carrinho(carrinhoID);
        await carrinho.init();

        const response = await axios.get(`${baseURL}/getmaioridcompra`);

        const maiorid = response.data+1;
        
        const responseEndereco = await axios.get(`${baseURL}/getEndereco/${carrinhoID}`);

        const enderecoRes = responseEndereco.data;

        await new Promise((resolve,reject) => {
            if (enderecoRes === false){
                reject("Endereço não cadastrado!")
            }else{
                resolve(enderecoRes);
            }
        });

        const produtoQuantia = await new Promise((resolve,reject) => {
            carrinho.getProdutos((results) => {
                if(results.length < 1){
                    return reject('Nenhum produto encontrado');
                } else{
                    resolve(results);
                }
            });
        });


        const data = formatDateToMySQL(new Date());

        let compra;


        for (const produto of produtoQuantia) {
            compra = new Compra(maiorid,carrinhoID,produto.produto.id,produto.quantia,data,1);
            console.log(Compra);

            await new Promise((resolve, reject) => {
                compraDAO.adicionarCompra(compra, (error) => {
                    if(error){
                        return reject(`Erro ao Finalizar Compra: ${error}`);
                    }
                    resolve();
                });
            });
        };
        console.log("TESTE3")
        console.log(`CARRINHO: ${carrinho.id}`)
        await new Promise((resolve,reject) => {
            carrinho.finalizarCarrinho((error) => {
                if (error){
                    return reject(`Erro ao Finalizar Carrinho: ${error}`);
                }
                resolve();
            });
        });

        res.status(200).json(`Sucesso ao Finalizar compra!`);
    } catch (error) {
        console.error("Erro durante o processamento:", error);
        res.status(500).json(`${error}`);
    }
});


app.get('/getcompras', async (req,res) => {
    const UsuarioID =  req.session.user.id;

    compraDAO.getCompras(UsuarioID, (error,results) =>{
        if(error){
            res.status(500).json(error);
        }else{
            res.status(200).json(results);
        }
    });
});

app.post('/selecionarCompra/:compraID', async (req,res) => {
    const compraID = req.params.compraID;

    console.log('ID Compra Salvo: ' + compraID);

    req.session.compraSelecionada = compraID;
    req.session.save();
    res.sendStatus(200);
});

app.get('/getCompraSelecionada', async (req,res) => {
    const compraID = req.session.compraSelecionada;

    console.log('ID Selecionado: ' + compraID);

    compraDAO.getCompraPorId(compraID, (error,results) =>{
        if (error){
            res.status(500).json(error);
        } else{
            res.status(200).json({resultado: results, compraid:compraID});
        }
    });
});

app.get('/getCompraPorId/:compraID', async (req,res) => {
    const compraID = req.params.compraID;

    compraDAO.getCompras(compraID, (error,results) =>{
        if(error){
            res.status(500).json(error);
        }else{
            res.status(200).json(results);
        }
    });
});

//Endereco

app.get('/getEndereco/:usuarioID', async (req,res) => {
    let usuarioID = req.params.usuarioID;
    if (usuarioID < 0){
        usuarioID = req.session.user.id
    }

    enderecoDAO.getEndereco(usuarioID, (error,results) =>{
        if(error){
            res.status(500).json(`${error}`);
        }else{
            res.status(200).json(results);
        }
    });
});

app.post('/cadastrarEndereco', async (req,res) => {
    let endereco = req.body;

    endereco.idusuario = req.session.user.id;

    enderecoDAO.cadastrarEndereco(endereco, (error) =>{
        if(error){
            res.status(500).json(`${error}`);
            console.log("Erro Cadastro Endereco!: " + error)
        }else{
            res.status(200).json(`Sucesso ao Cadastrar Endereço!`);
            console.log("Sucesso Cadastro Endereco!")
        }
    });
});


app.post('/editarEndereco', async (req,res) => {
    let endereco = req.body;

    endereco.idusuario = req.session.user.id;

    enderecoDAO.editarEndereco(endereco, (error) =>{
        if(error){
            res.status(500).json(`${error}`);
        }else{
            res.status(200).json(`Sucesso ao Editar Endereço!`);
            
        }
    });
});

//Permissões

app.get('/checkUsuarioPermissao/:permissionID', async (req,res) => {
    const permissionID = req.params.permissionID;
    const usuarioID =  req.session.user.id;

    permissaoDAO.checkUsuarioPermissao(usuarioID,permissionID,(error,results) =>{
        if(error){
            res.status(500).json(error);
        }else {
            res.status(200).json(results);
        }
    });
});


app.listen(port, () => {
    console.log(`Servidor rodando em http://127.0.0.1:${port}`);
});

app.post('/cadastro', (req, res) => {
    const usuario = req.body;

    usuarioDAO.fazerCadastro(usuario, (error, message) => {
        if (error) {
            res.status(500).send(`Erro ao cadastrar usuário: ${error}`);
        } else {
            res.json(message);
            console.log('Mensagem: ' + message);
        }
    });
});



app.post('/login', async (req, res) => {
    const { email, senha } = req.body;

    usuarioDAO.fazerLogin(email, senha, async (error, success, message, userInfo) => {
        if (error) {
            return res.status(500).send(error);
        }

        if (success) {
            req.session.user = { email: email, nome: userInfo.nome, id: userInfo.id };
            return res.status(200).json({ success, message });
        } else {
            return res.status(401).json({ success, message });
        }
    });
});

app.get('/user-info', (req, res) =>{
    if(req.session.user) {
        res.json({success:true, user: req.session.user});
    } else {
        res.json({success:false, message: 'Usuário não está logado!'});
    }
});

app.delete('/remover', (req, res) => {
    const { id } = req.body;

    usuarioDAO.removerCadastro(id, (error, message) => {
        if (error) {
            res.status(500).send(`Erro ao remover usuário: ${error}`);
        } else {
            res.status(200).json(message);
        }
    });
});
